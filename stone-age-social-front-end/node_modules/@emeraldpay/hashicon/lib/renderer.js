"use strict";
exports.__esModule = true;
var figures_1 = require("./figures");
var sprite_1 = require("./sprite");
var shapes_1 = require("./shapes");
/**
 * map numbers for param
 * @param  {Object} param Parameter containing min and max values
 * @param  {Number} value Number to process
 * @return {Number}       Normalised number
 */
function processParam(param, value) {
    return param.min + (value % (param.max - param.min));
}
/**
 * Canvas renderer
 * @param  {Uint16Array}	hashValues Integers
 * @param  {Object} params Rendering parameters
 * @return {Object}        Canvas HTML object
 */
function renderer(hashValues, params) {
    var hue = processParam(params.hue, hashValues[0]);
    var saturation = processParam(params.saturation, hashValues[1]);
    var lightness = processParam(params.lightness, hashValues[2]);
    var shift = processParam(params.shift, hashValues[3]);
    var figureAlpha = processParam(params.figureAlpha, hashValues[4]);
    var figureIndex = hashValues[5] % figures_1.StandardFigures.length;
    var createCanvas = params.createCanvas;
    // Draw on canvas
    var size = params.size || 100;
    var canvas = createCanvas(size, size);
    var ctx = canvas.getContext('2d');
    sprite_1.Sprites.forEach(function (line, i) {
        var light = params.light.enabled ? params.light[line.light] : 1;
        // variations
        var x = Math.round(hashValues[6] / (i + 1));
        var variation = params.variation.enabled ? processParam(params.variation, x) : 0;
        // Draw on canvas
        ctx.beginPath();
        if (!line.hidden) {
            var shape = shapes_1.Shapes[line.shape];
            ctx.moveTo(size * (shape.x1 + line.x), size * (shape.y1 + line.y));
            ctx.lineTo(size * (shape.x2 + line.x), size * (shape.y2 + line.y));
            ctx.lineTo(size * (shape.x3 + line.x), size * (shape.y3 + line.y));
        }
        // Fill background
        ctx.fillStyle = "hsla(" + (hue + variation) + ", " + saturation + "%, " + (lightness + light) + "%, 1)";
        ctx.fill();
        // draw figure ( whats when opacity of data > 0 )
        var figure = figures_1.StandardFigures[figureIndex];
        if (figure[i] > 0) {
            var alpha = figure[i] * figureAlpha / 10;
            ctx.fillStyle = "hsla(" + (hue + shift + variation) + ", " + saturation + "%, " + (lightness + light) + "%, " + alpha + ")";
            ctx.fill();
        }
    });
    return canvas;
}
exports["default"] = renderer;
