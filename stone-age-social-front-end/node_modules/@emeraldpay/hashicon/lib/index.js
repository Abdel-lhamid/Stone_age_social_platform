"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
exports.__esModule = true;
exports.hashicon = void 0;
var renderer_1 = require("./renderer");
var params_1 = require("./params");
var utils_1 = require("./utils");
var js_sha3_1 = require("js-sha3");
var blake2s_1 = require("@stablelib/blake2s");
var text_encoding_1 = require("text-encoding");
var enc = new text_encoding_1.TextEncoder();
var key = new Uint8Array(enc.encode("emerald/hashicon"));
function hashKeccak(hash) {
    return new Uint8Array(js_sha3_1.keccak256.arrayBuffer(hash));
}
function hashBlake2(hash) {
    var hasher = new blake2s_1.BLAKE2s(16, { key: key });
    hasher.update(enc.encode(hash));
    return hasher.digest();
}
function hashicon(hash, options) {
    if (options === void 0) { options = {}; }
    var extraParams = {};
    // overload "options": allow to call with only size value (numeric)
    if (typeof options == "number") {
        extraParams = __assign(__assign({}, extraParams), { size: options });
    }
    else if (typeof options == "object") {
        extraParams = __assign(__assign({}, extraParams), options);
    }
    // Deep merge
    var params = utils_1.deepMerge(params_1.DefaultParams, extraParams);
    var result;
    if (params.hasher === "blake2") {
        result = new Uint16Array(hashBlake2(hash));
    }
    else if (params.hasher === "legacy" || params.hasher === "keccak") {
        result = new Uint16Array(hashKeccak(hash));
    }
    else {
        throw Error("Unsupported hasher: " + params.hasher);
    }
    return renderer_1["default"](result, params);
}
exports.hashicon = hashicon;
