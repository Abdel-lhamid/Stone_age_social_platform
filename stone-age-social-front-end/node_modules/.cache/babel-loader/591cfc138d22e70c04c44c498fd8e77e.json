{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\n\n/**\r\n * Chooses the most appropriate locale\r\n * (one of the registered ones)\r\n * based on the list of preferred `locales` supplied by the user.\r\n *\r\n * @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\r\n * @param {Function} isLocaleDataAvailable - tests if a locale is available.\r\n *\r\n * @returns {string} The most suitable locale.\r\n *\r\n * @example\r\n * // Returns 'en'\r\n * chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\r\n */\nexport default function chooseLocale(locales, isLocaleDataAvailable) {\n  // This is not an intelligent algorithm,\n  // but it will do for this library's case.\n  // `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\n  for (var _iterator = locales, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n    var locale = _ref;\n    if (isLocaleDataAvailable(locale)) {\n      return locale;\n    }\n    var parts = locale.split('-');\n    while (parts.length > 1) {\n      parts.pop();\n      locale = parts.join('-');\n      if (isLocaleDataAvailable(locale)) {\n        return locale;\n      }\n    }\n  }\n  throw new Error(\"No locale data has been registered for any of the locales: \".concat(locales.join(', ')));\n}\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\n\nexport function intlDateTimeFormatSupportedLocale(locales) {\n  /* istanbul ignore else */\n  if (intlDateTimeFormatSupported()) {\n    return Intl.DateTimeFormat.supportedLocalesOf(locales)[0];\n  }\n}\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\n\nexport function intlDateTimeFormatSupported() {\n  // Babel transforms `typeof` into some \"branches\"\n  // so istanbul will show this as \"branch not covered\".\n\n  /* istanbul ignore next */\n  var isIntlAvailable = (typeof Intl === \"undefined\" ? \"undefined\" : _typeof(Intl)) === 'object';\n  return isIntlAvailable && typeof Intl.DateTimeFormat === 'function';\n}","map":{"version":3,"sources":["../source/locale.js"],"names":["chooseLocale","locales","isLocaleDataAvailable","locale","parts","split","length","pop","join","Error","intlDateTimeFormatSupportedLocale","intlDateTimeFormatSupported","Intl","DateTimeFormat","supportedLocalesOf","isIntlAvailable"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;AAcA,eAAe,SAASA,YAAT,CAAsBC,OAAtB,EAA+BC,qBAA/B,EAAsD;EACpE;EACA;EACA;EACA,KAAA,IAAA,SAAA,GAAmBD,OAAnB,EAAA,QAAA,GAAA,KAAA,CAAA,OAAA,CAAA,SAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,QAAA,GAAA,SAAA,GAAA,SAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA,CAAA,IAA4B;IAAA,IAAA,IAAA;IAAA,IAAA,QAAA,EAAA;MAAA,IAAA,EAAA,IAAA,SAAA,CAAA,MAAA,EAAA;MAAA,IAAA,GAAA,SAAA,CAAA,EAAA,EAAA,CAAA;IAAA,CAAA,MAAA;MAAA,EAAA,GAAA,SAAA,CAAA,IAAA,CAAA,CAAA;MAAA,IAAA,EAAA,CAAA,IAAA,EAAA;MAAA,IAAA,GAAA,EAAA,CAAA,KAAA;IAAA;IAAA,IAAnBE,MAAmB,GAAA,IAAA;IAC3B,IAAID,qBAAqB,CAACC,MAAD,CAAzB,EAAmC;MAClC,OAAOA,MAAP;IACA;IACD,IAAMC,KAAK,GAAGD,MAAM,CAACE,KAAPF,CAAa,GAAbA,CAAd;IACA,OAAOC,KAAK,CAACE,MAANF,GAAe,CAAtB,EAAyB;MACxBA,KAAK,CAACG,GAANH,CAAAA,CAAAA;MACAD,MAAM,GAAGC,KAAK,CAACI,IAANJ,CAAW,GAAXA,CAATD;MACA,IAAID,qBAAqB,CAACC,MAAD,CAAzB,EAAmC;QAClC,OAAOA,MAAP;MACA;IACD;EACD;EAED,MAAM,IAAIM,KAAJ,CAAA,6DAAA,CAAA,MAAA,CAAwER,OAAO,CAACO,IAARP,CAAa,IAAbA,CAAxE,CAAA,CAAN;AACA;AAED;;;;;;;AAMA,OAAO,SAASS,iCAAT,CAA2CT,OAA3C,EAAoD;EAC1D;EACA,IAAIU,2BAA2B,CAAA,CAA/B,EAAmC;IAClC,OAAOC,IAAI,CAACC,cAALD,CAAoBE,kBAApBF,CAAuCX,OAAvCW,CAAAA,CAAgD,CAAhDA,CAAP;EACA;AACD;AAED;;;;;AAIA,OAAO,SAASD,2BAAT,CAAA,EAAuC;EAC7C;EACA;;EACA;EACA,IAAMI,eAAe,GAAG,CAAA,OAAOH,IAAP,KAAA,WAAA,GAAA,WAAA,GAAA,OAAA,CAAOA,IAAP,CAAA,MAAgB,QAAxC;EACA,OAAOG,eAAe,IAAI,OAAOH,IAAI,CAACC,cAAZ,KAA+B,UAAzD;AACA","sourcesContent":["/**\r\n * Chooses the most appropriate locale\r\n * (one of the registered ones)\r\n * based on the list of preferred `locales` supplied by the user.\r\n *\r\n * @param {string[]} locales - the list of preferable locales (in [IETF format](https://en.wikipedia.org/wiki/IETF_language_tag)).\r\n * @param {Function} isLocaleDataAvailable - tests if a locale is available.\r\n *\r\n * @returns {string} The most suitable locale.\r\n *\r\n * @example\r\n * // Returns 'en'\r\n * chooseLocale(['en-US'], undefined, (locale) => locale === 'ru' || locale === 'en')\r\n */\r\nexport default function chooseLocale(locales, isLocaleDataAvailable) {\r\n\t// This is not an intelligent algorithm,\r\n\t// but it will do for this library's case.\r\n\t// `sr-Cyrl-BA` -> `sr-Cyrl` -> `sr`.\r\n\tfor (let locale of locales) {\r\n\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\treturn locale\r\n\t\t}\r\n\t\tconst parts = locale.split('-')\r\n\t\twhile (parts.length > 1) {\r\n\t\t\tparts.pop()\r\n\t\t\tlocale = parts.join('-')\r\n\t\t\tif (isLocaleDataAvailable(locale)) {\r\n\t\t\t\treturn locale\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tthrow new Error(`No locale data has been registered for any of the locales: ${locales.join(', ')}`)\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat` for these `locales`.\r\n * Returns the first suitable one.\r\n * @param  {(string|string[])} locales\r\n * @return {?string} The first locale that can be used.\r\n */\r\nexport function intlDateTimeFormatSupportedLocale(locales) {\r\n\t/* istanbul ignore else */\r\n\tif (intlDateTimeFormatSupported()) {\r\n\t\treturn Intl.DateTimeFormat.supportedLocalesOf(locales)[0]\r\n\t}\r\n}\r\n\r\n/**\r\n * Whether can use `Intl.DateTimeFormat`.\r\n * @return {boolean}\r\n */\r\nexport function intlDateTimeFormatSupported() {\r\n\t// Babel transforms `typeof` into some \"branches\"\r\n\t// so istanbul will show this as \"branch not covered\".\r\n\t/* istanbul ignore next */\r\n\tconst isIntlAvailable = typeof Intl === 'object'\r\n\treturn isIntlAvailable && typeof Intl.DateTimeFormat === 'function'\r\n}\r\n"]},"metadata":{},"sourceType":"module"}